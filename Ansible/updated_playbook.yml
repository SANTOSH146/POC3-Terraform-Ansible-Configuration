- hosts: Jenkins
  become: yes

  vars:
    sonarqube_port: 9000
    sonarqube_ci_login: "admin"
    sonarqube_ci_password: "admin123"
    sonarqube_admin_login: "admin"
    sonarqube_admin_password: "admin"
    sonarqube_token_name: "token"
    quality_gate_name: "Sonar way"
    sonarqube_ci_token_purpose: "Jenkins Integration"
    jenkins_password: "admin"
    ansible_python_interpreter: /root/myenv/bin/python3 
    public_ip: "52.91.245.89"

  tasks:
    - name: Start Docker service
      service:
        name: docker
        state: started
        enabled: yes

    - name: Pull Jenkins and SonarQube images
      docker_image:
        name: "{{ item }}"
        source: pull
      loop:
        - jenkins/jenkins:lts
        - sonarqube

    - name: Run Jenkins container
      docker_container:
        name: jenkins
        image: jenkins/jenkins:lts
        state: started
        published_ports:
          - "8080:8080"
          - "50000:50000"

    - name: Run SonarQube container
      docker_container:
        name: sonarqube
        image: sonarqube
        state: started
        published_ports:
          - "9000:9000"

    - name: Wait for Jenkins to start
      wait_for:
        port: 8080
        delay: 10
        timeout: 60

    - name: Wait for SonarQube to start
      wait_for:
        port: 9000
        delay: 30   # Increased delay for SonarQube to fully start
        timeout: 180  # Increased timeout

    - name: Get initial Jenkins admin password
      command: docker exec jenkins cat /var/jenkins_home/secrets/initialAdminPassword
      register: jenkins_password
      until: jenkins_password.rc == 0
      retries: 5
      delay: 10

    - name: Print Jenkins initial admin password
      debug:
        msg: "Jenkins initial admin password: {{ jenkins_password.stdout }}"

    - name: Install Groovy in Jenkins container
      command: docker exec --user root jenkins bash -c "apt-get update && apt-get install -y groovy"

    - name: Create init.groovy.d directory in Jenkins container
      command: docker exec --user root jenkins mkdir -p /var/jenkins_home/init.groovy.d

    - name: Copy basic setup Groovy script to Jenkins container
      command: docker cp /tmp/basic-setup.groovy jenkins:/var/jenkins_home/init.groovy.d/basic-setup.groovy

    - name: Restart Jenkins container to apply configuration
      docker_container:
        name: jenkins
        state: stopped

    - name: Start Jenkins container after applying Groovy script
      docker_container:
        name: jenkins
        state: started

    - name: Wait for Jenkins to start
      wait_for:
        port: 8080
        delay: 10
        timeout: 60

    - name: "Wait until SonarQube Container is reachable via TCP/IP."
      ansible.builtin.wait_for:
        host: "{{ public_ip}}"
        port: "{{ sonarqube_port }}"
        state: drained
        delay: 5
        connect_timeout: 15
        timeout: 30

    - name: Start sonarqube container 
      docker_container:
        name: sonarqube
        state: started
      
    - name: Check SonarQube to be healthy.
      ansible.builtin.uri:
        url: "http://{{ public_ip}}:{{ sonarqube_port }}/api/system/health"
        user: "{{ sonarqube_admin_login }}"
        password: "{{ sonarqube_admin_password }}"
        method: GET
        force_basic_auth: yes
      register: response
      until:
        - "response.status == 200"
        - "'GREEN' == response.json.health"
      retries: 20
      delay: 5


    # - name: Create CI User
    #   ansible.builtin.uri:
    #     url: "http://3.83.115.72:{{ sonarqube_port }}/api/users/create?local=true&login={{ sonarqube_ci_login }}&name={{ sonarqube_ci_login | urlencode }}&password={{ sonarqube_ci_password }}"
    #     user: "{{ sonarqube_admin_login }}"
    #     password: "{{ sonarqube_admin_password }}"
    #     method: POST
    #     force_basic_auth: yes
    #   register: ciresponse
    #   failed_when: ciresponse.status != 200

    - name: Change Password of admin user.
      ansible.builtin.uri:
        url: "http://{{ public_ip }}:{{ sonarqube_port }}/api/users/change_password?login={{ sonarqube_admin_login }}&password={{ sonarqube_ci_password }}&previousPassword={{ sonarqube_admin_password }}"
        user: "{{ sonarqube_admin_login }}"
        password: "{{ sonarqube_admin_password }}"
        method: POST
        force_basic_auth: yes
      register: responsecpw
      failed_when: responsecpw.status != 204


    - name: Create CI User Token.
      ansible.builtin.uri:
        url: "http://{{ public_ip }}:{{ sonarqube_port }}/api/user_tokens/generate?login={{ sonarqube_ci_login }}&name={{ sonarqube_ci_token_purpose | urlencode }}"
        user: "{{ sonarqube_ci_login }}"
        password: "{{ sonarqube_ci_password }}"
        method: POST
        force_basic_auth: yes
      register: ciresponsetoken
      failed_when: ciresponsetoken.status != 200
    - debug:
        msg: "TOKEN: {{ ciresponsetoken.json }}"



    # SonarQube Jenkins integration
    # - name: Install required plugins in Jenkins for SonarQube
    #   command: docker exec jenkins bash -c "jenkins-plugin-cli --plugins sonar sonar-quality-gates"

    # - name: Create SonarQube configuration in Jenkins
    #   command: docker exec jenkins bash -c "curl -X POST http://admin:{{ jenkins_password.stdout }}@{{ public_ip }}:8080/sonarQubeServer/api/servers --data-urlencode 'name=SonarQube' --data-urlencode 'serverUrl=http://{{ public_ip }}:9000' --data-urlencode 'credentials={{ ciresponsetoken.json.token }}'"

    # 
    
    - name: Create Groovy script in Jenkins container as root
      command: docker exec --user root jenkins bash -c 'echo "import hudson.plugins.sonar.SonarGlobalConfiguration; import hudson.plugins.sonar.model.TriggersConfig; import jenkins.model.Jenkins;\ndef sonarGlobalConfig = Jenkins.instance.getDescriptor(SonarGlobalConfiguration.class);\nsonarGlobalConfig.setServers([ new hudson.plugins.sonar.model.SonarInstallation( \"SonarQube\", // Name \"http://{{ public_ip }}:{{ sonarqube_port }}\", // SonarQube URL \"{{ '{{' }} ciresponsetoken.json.token {{ '}}' }}\", // SonarQube token \"\", \"\", \"\", // Empty Maven and Ant fields new TriggersConfig() // Default trigger configuration )]);\nsonarGlobalConfig.save();" > /var/jenkins_home/init.groovy.d/groovy_script.groovy'



    - name: Restart Jenkins to apply SonarQube configuration
      docker_container:
        name: jenkins
        state: stopped

    - name: Start Jenkins after Groovy configuration
      docker_container:
        name: jenkins
        state: started

    - name: Wait for Jenkins to start after SonarQube configuration
      wait_for:
        port: 8080
        delay: 10
        timeout: 60




    # - name: Install python3-venv package
    #   apt:
    #     name: python3-venv
    #     state: present
    #   become: true

    # - name: Install pip in case it's not available
    #   apt:
    #     name: python3-pip
    #     state: present
    #   become: true

    # - name: Create a virtual environment for Python
    #   command: python3 -m venv /opt/venv
    #   become: true
    #   args:
    #     creates: /opt/venv

    # - name: Install python-jenkins library in the virtual environment
    #   command: /opt/venv/bin/pip install python-jenkins
    #   become: true

    # - name: Get Jenkins Crumb
    #   uri:
    #     url: "http://{{ sonarqube_ci_login }}:{{ jenkins_password.stdout }}@3.83.115.72:8080/crumbIssuer/api/json"
    #     method: GET
    #     force_basic_auth: yes
    #     return_content: yes
    #   register: jenkins_crumb

    # - name: Debug Jenkins Crumb
    #   debug:
    #     msg: "Jenkins Crumb: {{ jenkins_crumb.json.crumb }}"

    # - name: Get Jenkins Crumb
    #   uri:
    #     url: "http://{{ sonarqube_ci_login }}:{{ jenkins_password.stdout }}@3.83.115.72:8080/crumbIssuer/api/json"
    #     method: GET
    #     force_basic_auth: yes
    #     return_content: yes
    #   register: jenkins_crumb
      # no_log: true  # This will prevent sensitive information from being logged


    # - name: Create Jenkins job using SonarQube for code analysis
    #   community.general.jenkins_job:
    #     config: "{{ lookup('file', 'pipeline-config.xml') }}"
    #     name: "SonarQube-Analysis"
    #     password: "{{ jenkins_password }}"
    #     url: http://3.83.115.72:8080
    #     user: "{{ sonarqube_ci_login }}"


    # - name: Create a jenkins job using basic authentication
    #   community.general.jenkins_job:
    #     config: "{{ lookup('file', 'pipeline-config.xml') }}"
    #     name: test
    #     password: admin
    #     url: http://{{ public_ip }}:8080
    #     user: admin

    - name: Create a jenkins job using the token
      community.general.jenkins_job:
        config: "{{ lookup('template', 'pipeline-config.xml') }}"
        name: test
        token: 116126f81d0889483b5d79b1ee342115b1
        url: http://{{ public_ip }}:8080
        user: admin